
taskKey="com.javarush.task.task29.task2909.big11"\n\nРефакторинг (11)


taskKey="com.javarush.task.task29.task2909.big03"\n\nРефакторинг (3)


11.1.	Замена кода ошибки исключением. Перепиши метод заправиться fill(double numberOfLiters),
чтобы он в случае ошибки кидал исключение Exception. Исправленный метод должен возвращать void.
11.2.	Разбиение условного оператора.
11.2.1.	Добавь и реализуй метод в классе Car, определяющий относится ли переданная дата к лету:
boolean isSummer(Date date , Date summerStart, Date summerEnd).
11.2.2.	Добавь и реализуй метод, рассчитывающий расход топлива зимой:
double getWinterConsumption(int length).
11.2.3.	Добавь и реализуй метод, рассчитывающий расход топлива летом:
double getSummerConsumption(int length).
11.2.4.	Перепиши метод getTripConsumption(), используя новые методы.


Требования:

1.	Необходимо изменить метод fill(double numberOfLiters) класса Car, чтобы он в случае ошибки бросал исключение Exception.
2.	Необходимо добавить в класс Car и реализовать публичный метод boolean isSummer(Date date , Date summerStart, Date summerEnd).
3.	Необходимо добавить в класс Car и реализовать публичный метод double getWinterConsumption(int length).
4.	Необходимо добавить в класс Car и реализовать публичный метод double getSummerConsumption(int length).
5.	Необходимо изменить метод getTripConsumption(), используя методы: isSummer, getWinterConsumption, getSummerConsumption.


Рефакторинг (11)

Разберись с кодом в пакете car (машина).
10.1.	Замена конструктора фабричным методом.
10.1.1.	Объяви классы Truck (грузовик), Sedan (седан) и Cabriolet (кабриолет), унаследованные от Car.
10.1.2.	Добавь в них конструкторы, принимающие int numberOfPassengers.
10.1.3.	Добавь фабричный статический метод Car create(int type, int numberOfPassengers) в класс Car и реализуй его.
10.1.4.	Измени область видимости конструктора класса Car.



Рефакторинг (11)

9.1.	Самоинкапсуляция поля. Перепиши метод incAverageGrade() используя сеттер и геттер для доступа к averageGrade.
9.2.	Замена поля-массива объектом. Замени массив int[] size объектом нового типа Size,
содержащим публичные поля: рост int height и вес int weight. Публичный класс Size объяви
внутри класса Human.
9.3.	Инкапсуляция поля. Сокрой поле company в классе Worker. Добавь сеттер и геттер для него.
9.4.	Замена кодирования типа классом.
9.4.1.	Объяви публичный класс группы крови BloodGroup внутри пакета human.
9.4.2.	Добавь в класс BloodGroup приватное константное поле int code, приватный конструктор,
принимающий int и инициализирующий поле code, геттер для поля класса.
9.4.3.	Добавь в класс BloodGroup статические методы first(), second(), third() и fourth(),
создающие и возвращающие объекты типа BloodGroup с правильным кодом внутри (1, 2, 3 и 4 соответственно).
9.4.4.	Примени в классе Human новый тип BloodGroup.



Рефакторинг (11)

8.1.	Удаление сеттера. Удали метод setId(). Поле id должно устанавливаться только в момент
создания объекта.
8.2.	Сокрытие метода (поля). Изменить область видимости поля nextId в соответствии с
областью его использования.
8.3.	Замена исключения проверкой условия. Перепиши метод removeStudent(int index), чтобы
он удалял студента из списка студентов только, если он там есть. Метод не должен кидать
исключение.
8.4.	Удаление управляющего флага. Перепиши метод findDimaOrSasha(), сохранив логику его
работы. В методе не должны использоваться флаги типа found, воспользуйся оператором
break.



Рефакторинг (11)

7.1.	Параметризация метода. Замени методы incAverageGradeBy01() и incAverageGradeBy02()
одним методом incAverageGrade(double delta).
7.2.	Передача всего объекта. Перепиши метод addInfoAboutStudent(), чтобы он в качестве
параметра принимал объект типа Student.
7.3.	Замена параметра вызовом метода. Перепиши метод printInfoAboutStudent(), чтобы он не
требовал в качестве параметра имя студента, а получал его, вызвав соответствующий
метод у переданного объекта.
7.4.	Замена параметров объектом. Перепиши методы setBeginningOfSession и setEndOfSession,
чтобы они вместо набора параметров принимали по одному объекту даты.



Рефакторинг (11)

6.1.	Замена параметра набором специализированных методов. Замени метод setValue() класса
Student специализированными методами setCourse и setAverageGrade.
6.2.	Добавление параметра. Добавить параметр с типом double в метод
getStudentWithAverageGrade(), чтобы было понятно с каким средним балом нужен студент.
Реализуй метод getStudentWithAverageGrade().
6.3.	Удаление параметра. Убери параметр из метода getStudentWithMaxAverageGrade().
Реализуй этот метод, он должен возвращать студента с максимальным средним балом.
6.4.	Разделение запроса и модификатора. Раздели метод
getStudentWithMinAverageGradeAndExpel на Student getStudentWithMinAverageGrade() и
void expel(Student student). Первый метод должен возвратить студента с
минимальным средним балом, а второй - отчислить переданного студента (удалять из
списка students).

1.	Необходимо спустить поле course в нужный класс и сделать его приватным.
2.	Необходимо спустить геттер для поля course в нужный класс.
3.	Интерфейс Alive должен существовать в пакете human.
4.	Интерфейс Alive должен содержать объявление метода жить live().
5.	Класс Human должен поддерживать интерфейс Alive.
6.	Класс Professor нужно удалить.


Рефакторинг (3)

2.1.	Извлечение подкласса.
2.1.1.	Добавь класс Soldier в пакет human.
2.1.2.	Избавься от поля isSoldier.
2.1.3.	Обнови сигнатуру конструктора Human.
2.1.4.	Перенеси в Soldier необходимые методы из Human.
2.2.	Подъем тела конструктора.
2.2.1.	Перенеси инициализацию полей name и age в подходящее место, добавь необходимые параметры в конструктор Human.
2.2.2.	Добавь конструктор в класс Soldier.



Рефакторинг (3)

taskKey="com.javarush.task.task29.task2909.big01"\n\nРефакторинг (1)


Пришло время немного порефакторить.
Википедия говорит: &quot;Рефакторинг (англ. refactoring)
или реорганизация кода - процесс изменения внутренней структуры программы, не
затрагивающий её внешнего поведения и имеющий целью облегчить понимание её работы. В
основе рефакторинга лежит последовательность небольших эквивалентных (то есть
сохраняющих поведение) преобразований. Поскольку каждое преобразование маленькое,
программисту легче проследить за его правильностью, и в то же время вся
последовательность может привести к существенной перестройке программы и улучшению её
согласованности и четкости.&quot;
Такими маленькими преобразованиями мы и будем заниматься.
После каждого изменения следи за сохранностью работоспособности кода.
Многие методы рефакторинга не однократно применены и проверены сообществом
программистов. Получили свои названия. Каждое задание будет сопровождено названием
рефакторинга. Ты всегда можешь прочитать более подробно о нем в книге Мартина Фаулера
&quot;Рефакторинг: Улучшение существующего кода&quot;.
Начнем. Внимательно ознакомься с кодом пакета human (человек).

Задания:
1.1.	Подъем поля. Подними поле children в базовый класс.
1.2.	Подъем метода. Подними сеттер и геттер для children в базовый класс.
1.3.	Инкапсуляция коллекции.
1.3.1.	Метод getChildren должен возвращать не модифицируемое представление списка children.
1.3.2.	Убери сеттер для children.
1.3.3.	Добавь методы addChild (Human) и removeChild (Human). Реализуй их логику.



Требования:
1.	Поле children должно быть расположено в классе Human, и не должно быть расположено в классах Teacher и Student.
2.	Сеттер и геттер для поля children должны быть расположены в классе Human, и не должны быть расположены в классах Teacher и Student.
3.	Метод getChildren в классе Human должен возвращать Collections.unmodifiableList(children).
4.	Необходимо удалить метод setChildren из класса Human.
5.	Необходимо добавить методы addChild(Human) и removeChild(Human) в класс Human, и реализовать их.



